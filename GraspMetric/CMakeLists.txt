PROJECT(GlobalGrasp)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

#COMPILE SETTINGS
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/")
SET(CUDA_SEPARABLE_COMPILATION ON)
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  MESSAGE(STATUS "Build type: Debug")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj -Wall -std=c++11 -frounding-math ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O0 -Wall -fPIC -std=c++11 -Wno-unused-function -frounding-math ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ELSE()
  MESSAGE(STATUS "Build type: Release")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj -Wall -std=c++11 -frounding-math ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O3 -Wall -fPIC -std=c++11 -Wno-unused-function -frounding-math ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})
#LIBRARY
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")

#THIRD PARTY HEADERS
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hh)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cc ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.c)
  FILE(GLOB_RECURSE cuda_source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cu)
ENDMACRO(SEARCH_SOURCE)
SEARCH_SOURCE(CommonFile CommonFile)
SEARCH_SOURCE(GraspMetric GraspMetric)

#BUILD LIBRARY
ADD_LIBRARY(GraspMetric SHARED
  ${sourceFusion} ${headerFusion}
  ${sourceCommonFile} ${headerCommonFile}
  ${sourceGraspMetric} ${headerGraspMetric})
TARGET_LINK_LIBRARIES(GraspMetric stdc++fs ${ALL_LIBRARIES})

#EXE
MACRO(ADD_EXE NAME)
  ADD_EXECUTABLE(${NAME} ${NAME}.cpp)
  IF(MSVC)
    TARGET_LINK_LIBRARIES(${NAME} GraspMetric ${ALL_STATIC_LIBRARIES})
  ELSE(MSVC)
    TARGET_LINK_LIBRARIES(${NAME} GraspMetric gomp ${ALL_STATIC_LIBRARIES})
  ENDIF(MSVC)
ENDMACRO(ADD_EXE)
#GEOMETRY
ADD_EXE(mainMetric)
ADD_EXE(mainPyMetric)
ADD_EXE(mainDebugSupport)

#PYTHON
SET(ENABLE_PYTHON ON)
IF(ENABLE_PYTHON)
  MESSAGE(STATUS "Building pyGraspMetric!")
  ADD_SUBDIRECTORY(pybind11)
  PYBIND11_ADD_MODULE(pyGraspMetric MODULE pyGraspMetric.cpp)
  TARGET_LINK_LIBRARIES(pyGraspMetric GraspMetric ${ALL_STATIC_LIBRARIES})
ENDIF(ENABLE_PYTHON)
